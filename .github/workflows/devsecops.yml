name: DevSecOps Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  iac:
    runs-on: ubuntu-latest
    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v3

      - name: Instalar Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Ejecutar Trivy para IaC (Generar informe JSON)
        run: |
          trivy fs . --exit-code 0 --severity LOW,MEDIUM,HIGH,CRITICAL --format json --output trivy-iac-report.json

      - name: Enviar informe de Trivy a DefectDojo
        run: |
          curl -X POST -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
               -F "engagement=${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}" \
               -F "file=@trivy-iac-report.json" \
               -F "scan_type=Trivy" \
               ${{ secrets.DEFECTDOJO_URL }}/api/v2/import-scan/

  sca:
    runs-on: ubuntu-latest
    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v3

      - name: Configurar Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Instalar Maven
        run: sudo apt-get install -y maven

      - name: Ejecutar Dependency-Check (Generar informe JSON)
        run: |
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip
          unzip dependency-check-8.4.0-release.zip
          ./dependency-check/bin/dependency-check.sh --project gestor-bancario --scan . --disableAssembly --format JSON --out dependency-check-report.json

      - name: Enviar informe de Dependency-Check a DefectDojo
        run: |
          curl -X POST -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
               -F "engagement=${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}" \
               -F "file=@dependency-check-report.json" \
               -F "scan_type=Dependency-Check" \
               ${{ secrets.DEFECTDOJO_URL }}/api/v2/import-scan/

  sast:
    runs-on: ubuntu-latest
    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v3

      - name: Configurar Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Instalar Maven
        run: sudo apt-get install -y maven

      - name: Ejecutar análisis con SpotBugs (Generar informe XML)
        run: |
          cd PAI2_ST10 && mvn clean install -Ddependency-check.skip=true spotbugs:check spotbugs:gui -Dspotbugs.output=xml -Dspotbugs.outputFile=spotbugs-report.xml

      - name: Enviar informe de SpotBugs a DefectDojo
        run: |
          curl -X POST -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
               -F "engagement=${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}" \
               -F "file=@PAI2_ST10/spotbugs-report.xml" \
               -F "scan_type=SpotBugs" \
               ${{ secrets.DEFECTDOJO_URL }}/api/v2/import-scan/

  dast:
    runs-on: ubuntu-latest
    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v3

      - name: Configurar Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Instalar Maven
        run: sudo apt-get install -y maven

      - name: Instalar dependencias
        run: |
          cd PAI2_ST10 && mvn clean install -DskipTests -Dspotbugs.skip=true -Ddependency-check.skip=true

      - name: Ejecutar el servidor SSL en segundo plano
        run: |
          nohup java FileSSLServerSocket > server.log 2>&1 &

      - name: Esperar a que el servidor se inicie
        run: |
          echo "Esperando a que el servidor inicie..."
          sleep 30

      - name: Ejecutar OWASP ZAP DAST (Generar informes HTML y JSON)
        run: |
          docker run --rm -u root -v $(pwd):/zap/wrk -t zaproxy/zap-stable zap-full-scan.py \
            -t https://host.docker.internal:3343 \
            -J zap-report.json \
            -r zap-report.html

      - name: Enviar informe de OWASP ZAP a DefectDojo
        run: |
          curl -X POST -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
               -F "engagement=${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}" \
               -F "file=@zap-report.json" \
               -F "scan_type=ZAP" \
               ${{ secrets.DEFECTDOJO_URL }}/api/v2/import-scan/

  iast:
    runs-on: ubuntu-latest
    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v3

      - name: Configurar Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Instalar Maven
        run: sudo apt-get install -y maven

      - name: Instalar dependencias
        run: |
          cd PAI2_ST10 && mvn clean install -DskipTests -Dspotbugs.skip=true -Ddependency-check.skip=true

      - name: Instalar Semgrep
        run: |
          pip install semgrep

      - name: Ejecutar la aplicación con Semgrep IAST (Generar informe SARIF)
        run: |
          nohup java -jar target/mi-aplicacion.jar > app.log 2>&1 &
          echo "Esperando a que la aplicación inicie..."
          sleep 30
          semgrep --config=auto --exclude target --exclude .git . --json > semgrep-report.sarif

      - name: Enviar informe de Semgrep a DefectDojo
        run: |
          curl -X POST -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
               -F "engagement=${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}" \
               -F "file=@semgrep-report.sarif" \
               -F "scan_type=Semgrep" \
               ${{ secrets.DEFECTDOJO_URL }}/api/v2/import-scan/