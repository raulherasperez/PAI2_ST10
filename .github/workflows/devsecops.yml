name: DevSecOps Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  iac:
    runs-on: ubuntu-latest
    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v2

      - name: Instalar Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Crear carpeta reports
        run: mkdir -p reports

      - name: Ejecutar Trivy para IaC (Generar informe JSON)
        run: |
          trivy fs . --exit-code 0 --severity LOW,MEDIUM,HIGH,CRITICAL --format json --output reports/trivy-iac-report.json
          echo "==> Archivos tras Trivy:"
          ls -la

      - name: Verificar si el informe de Trivy existe
        run: |
          if [ ! -f reports/trivy-iac-report.json ]; then
            echo "Error: El informe de Trivy no se ha generado."
            exit 1
          fi

      - name: Publicar informe de Trivy en DefectDojo
        id: import-scan
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTDOJO_API_KEY }}
          defectdojo_url: ${{ secrets.DEFECTDOJO_URL }}
          file: reports/trivy-iac-report.json
          scan_type: Trivy Scan
          engagement: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}

      - name: Mostrar respuesta
        run: |
          set -e
          printf '%s\n' '${{ steps.import-scan.outputs.response }}'

  sca:
    runs-on: ubuntu-latest
    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v2

      - name: Configurar Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Instalar Maven
        run: sudo apt-get install -y maven

      - name: Crear carpeta reports
        run: mkdir -p reports

      - name: Ejecutar Dependency-Check (Generar informe JSON)
        run: |
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip
          unzip dependency-check-8.4.0-release.zip
          ./dependency-check/bin/dependency-check.sh --project gestor-bancario --scan . --disableAssembly --format JSON --out reports/dependency-check-report.json
          echo "==> Archivos tras Dependency-Check:"
          ls -la

      - name: Verificar si el informe de Dependency-Check existe
        run: |
          if [ ! -f reports/dependency-check-report.json ]; then
            echo "Error: El informe de Dependency-Check no se ha generado."
            exit 1
          fi

      - name: Publicar informe de Dependency-Check en DefectDojo
        id: import-scan
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTDOJO_API_KEY }}
          defectdojo_url: ${{ secrets.DEFECTDOJO_URL }}
          file: reports/dependency-check-report.json
          scan_type: Dependency Check Scan
          engagement: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}

      - name: Mostrar respuesta
        run: |
          set -e
          printf '%s\n' '${{ steps.import-scan.outputs.response }}'

  sast:
    runs-on: ubuntu-latest
    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v2

      - name: Configurar Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Instalar Maven
        run: sudo apt-get install -y maven

      - name: Crear carpeta reports
        run: mkdir -p reports

      - name: Ejecutar análisis con SpotBugs (Generar informe XML)
        run: |
          cd PAI2_ST10 && mvn clean install -Ddependency-check.skip=true spotbugs:check -X
          echo "==> Archivos tras SpotBugs:"
          ls -la 

      - name: Verificar si el informe de SpotBugs existe
        run: |
          if [ ! -f PAI2_ST10/target/spotbugsXml.xml ]; then
            echo "Error: El informe de SpotBugs no se ha generado."
            exit 1
          fi

      - name: Mover informe de SpotBugs a la carpeta reports
        run: mv PAI2_ST10/target/spotbugsXml.xml reports/spotbugs-report.xml

      - name: Publicar informe de SpotBugs en DefectDojo
        id: import-scan
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTDOJO_API_KEY }}
          defectdojo_url: ${{ secrets.DEFECTDOJO_URL }}
          file: reports/spotbugs-report.xml
          scan_type: SpotBugs Scan
          engagement: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}

      - name: Mostrar respuesta
        run: |
          set -e
          printf '%s\n' '${{ steps.import-scan.outputs.response }}'

  dast:
    runs-on: ubuntu-latest
    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v2

      - name: Configurar Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Instalar Maven
        run: sudo apt-get install -y maven

      - name: Crear carpeta reports
        run: mkdir -p reports

      - name: Instalar dependencias
        run: |
          cd PAI2_ST10 && mvn clean install -DskipTests -Dspotbugs.skip=true -Ddependency-check.skip=true

      - name: Ejecutar OWASP ZAP DAST (Generar informes HTML y JSON)
        run: |
          docker run --rm -u root -v $(pwd):/zap/wrk -t zaproxy/zap-stable zap-full-scan.py \
            -t https://host.docker.internal:3343 \
            -J reports/zap-report.json \
            -r reports/zap-report.html
          echo "==> Archivos tras OWASP ZAP:"
          ls -la

      - name: Verificar si el informe de ZAP existe
        run: |
          if [ ! -f reports/zap-report.json ]; then
            echo "Error: El informe de ZAP no se ha generado."
            exit 1
          fi

      - name: Publicar informe de ZAP en DefectDojo
        id: import-scan
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTDOJO_API_KEY }}
          defectdojo_url: ${{ secrets.DEFECTDOJO_URL }}
          file: reports/zap-report.json
          scan_type: ZAP Scan
          engagement: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}

      - name: Mostrar respuesta
        run: |
          set -e
          printf '%s\n' '${{ steps.import-scan.outputs.response }}'

  iast:
    runs-on: ubuntu-latest
    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v2

      - name: Configurar Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Instalar Maven
        run: sudo apt-get install -y maven

      - name: Crear carpeta reports
        run: mkdir -p reports

      - name: Instalar dependencias
        run: |
          cd PAI2_ST10 && mvn clean install -DskipTests -Dspotbugs.skip=true -Ddependency-check.skip=true

      - name: Instalar Semgrep
        run: pip install semgrep

      - name: Ejecutar la aplicación con Semgrep IAST (Generar informe SARIF)
        run: |
          nohup java -jar target/mi-aplicacion.jar > app.log 2>&1 &
          echo "Esperando a que la aplicación inicie..."
          sleep 30
          semgrep --config=auto --exclude target --exclude .git . --sarif > reports/semgrep-report.sarif
          echo "==> Archivos tras Semgrep:"
          ls -la

      - name: Verificar si el informe de Semgrep existe
        run: |
          if [ ! -f reports/semgrep-report.sarif ]; then
            echo "Error: El informe de Semgrep no se ha generado."
            exit 1
          fi

      - name: Publicar informe de Semgrep en DefectDojo
        id: import-scan
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTDOJO_API_KEY }}
          defectdojo_url: ${{ secrets.DEFECTDOJO_URL }}
          file: reports/semgrep-report.sarif
          scan_type: Semgrep Scan
          engagement: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}

      - name: Mostrar respuesta
        run: |
          set -e
          printf '%s\n' '${{ steps.import-scan.outputs.response }}'
